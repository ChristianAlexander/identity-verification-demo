import { useState } from "react";
import { ref, listAll, getDownloadURL } from "firebase/storage";
import { storage } from "../firebase";
import { Button } from "../components/ui/Button";
import { Card, CardContent } from "../components/ui/Card";
import { Badge } from "../components/ui/Badge";

export const VulnerabilityDemo = () => {
  const [loading, setLoading] = useState(false);
  const [files, setFiles] = useState([]);
  const [error, setError] = useState("");

  const listIdDocuments = async () => {
    setLoading(true);
    setError("");
    setFiles([]);

    try {
      const idDocsRef = ref(storage, "id-documents");
      const result = await listAll(idDocsRef);

      const fileData = [];

      // List all user folders
      for (const folderRef of result.prefixes) {
        const userFiles = await listAll(folderRef);

        for (const fileRef of userFiles.items) {
          try {
            const url = await getDownloadURL(fileRef);
            fileData.push({
              path: fileRef.fullPath,
              url: url,
              name: fileRef.name,
              userId: folderRef.name,
              isIdDocument: true,
            });
          } catch (err) {
            fileData.push({
              path: fileRef.fullPath,
              error: err.message,
              name: fileRef.name,
              userId: folderRef.name,
              isIdDocument: true,
            });
          }
        }
      }

      setFiles(fileData);
    } catch (err) {
      setError(`Failed to list ID documents: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-white dark:bg-gray-900">
      <div className="max-w-7xl mx-auto px-6 py-10">
        {/* Header */}
        <div className="text-center mb-10">
          <h2 className="text-4xl font-bold text-gray-900 dark:text-white mb-4">
            üö® Firebase Storage Vulnerability Demonstration
          </h2>
          <p className="text-lg text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
            This page demonstrates how vulnerable Firebase Storage rules expose
            sensitive user data.
          </p>
        </div>

        {/* Warning Card */}
        <Card className="mb-8 border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-900/20">
          <CardContent className="p-6">
            <h3 className="text-xl font-bold text-red-800 dark:text-red-300 mb-4">
              ‚ö†Ô∏è Critical Security Flaw
            </h3>
            <p className="text-red-700 dark:text-red-300 mb-6">
              The current Firebase Storage rules allow <strong>anyone</strong>{" "}
              to list and access ALL files in the bucket, including sensitive ID
              documents. No authentication required!
            </p>

            <div className="bg-gray-900 rounded-lg p-4">
              <h4 className="text-white font-medium mb-3">
                Current Vulnerable Rules:
              </h4>
              <pre className="text-green-400 text-sm overflow-x-auto">
                {`service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read, write: if true; // üö® DANGEROUS!
    }
  }
}`}
              </pre>
            </div>
          </CardContent>
        </Card>

        {/* Demo Actions */}
        <Card className="mb-8">
          <CardContent className="p-6">
            <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-3">
              Try It Yourself:
            </h3>
            <p className="text-gray-600 dark:text-gray-400 mb-6">
              Click this button to see all files in the storage bucket -{" "}
              <strong>no login required!</strong>
            </p>

            <Button
              onClick={listIdDocuments}
              disabled={loading}
              loading={loading}
              variant="danger"
              size="lg"
            >
              {loading ? "Loading..." : "List All ID Documents"}
            </Button>
          </CardContent>
        </Card>

        {/* Error Display */}
        {error && (
          <Card className="mb-8 border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-900/20">
            <CardContent className="p-6">
              <h4 className="font-medium text-red-800 dark:text-red-300 mb-2">
                Error:
              </h4>
              <p className="text-red-700 dark:text-red-300">{error}</p>
            </CardContent>
          </Card>
        )}

        {/* Files List */}
        {files.length > 0 && (
          <Card className="mb-8">
            <CardContent className="p-6">
              <h3 className="text-xl font-bold text-red-600 dark:text-red-400 mb-6">
                üö® Found {files.length} Files - All Publicly Accessible!
              </h3>

              <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                {files.map((file, index) => (
                  <Card
                    key={index}
                    className={`h-full ${file.isIdDocument ? "ring-2 ring-red-500/40 border-red-300 dark:border-red-700" : ""}`}
                  >
                    <CardContent className="p-4">
                      {file.isIdDocument && (
                        <Badge variant="error" className="mb-3">
                          SENSITIVE ID DOCUMENT
                        </Badge>
                      )}

                      <div className="space-y-2 mb-4">
                        <h4 className="font-medium text-gray-900 dark:text-white">
                          {file.name}
                        </h4>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          <strong>Path:</strong> {file.path}
                        </p>
                        {file.userId && (
                          <p className="text-sm text-gray-600 dark:text-gray-400">
                            <strong>User ID:</strong> {file.userId}
                          </p>
                        )}
                      </div>

                      {file.url ? (
                        <div className="space-y-3">
                          <p className="text-sm font-medium text-red-600 dark:text-red-400">
                            ‚ö†Ô∏è Publicly accessible URL:
                          </p>
                          <a
                            href={file.url}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="block p-2 bg-gray-100 dark:bg-gray-800 rounded text-xs text-blue-600 dark:text-blue-400 break-all hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
                          >
                            {file.url}
                          </a>
                          <p className="text-xs italic text-gray-500 dark:text-gray-400">
                            Try opening this link in an incognito window - no
                            authentication needed!
                          </p>

                          {file.isIdDocument && (
                            <div className="mt-3">
                              <img
                                src={file.url}
                                alt="ID Document"
                                className="w-full max-h-64 object-contain rounded border bg-gray-50 dark:bg-gray-800"
                                onError={(e) => {
                                  e.target.style.display = "none";
                                }}
                              />
                            </div>
                          )}
                        </div>
                      ) : (
                        <div className="p-3 bg-red-50 dark:bg-red-900/20 rounded">
                          <p className="text-sm text-red-700 dark:text-red-300">
                            <strong>Error:</strong> {file.error}
                          </p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Fix Info */}
        <Card className="border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-900/20">
          <CardContent className="p-6">
            <h3 className="text-xl font-bold text-green-800 dark:text-green-300 mb-4">
              üîß How to Fix This
            </h3>
            <p className="text-green-700 dark:text-green-300 mb-6">
              Replace the vulnerable rules with secure ones:
            </p>

            <div className="bg-gray-900 rounded-lg p-4 mb-4">
              <h4 className="text-white font-medium mb-3">Secure Rules:</h4>
              <pre className="text-green-400 text-sm overflow-x-auto">
                {`service firebase.storage {
  match /b/{bucket}/o {
    match /id-documents/{userId}/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null &&
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}`}
              </pre>
            </div>

            <p className="text-green-700 dark:text-green-300">
              <strong>Result:</strong> Only the document owner and admins can
              access ID files. Anonymous users get permission denied.
            </p>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};
